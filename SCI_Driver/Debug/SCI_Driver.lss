
SCI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9a  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000700  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000443  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000204f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "util/delay.h"
#include "Sci.h"
Sci_ConfigType myobj;
int main(void)
{
    myobj.baud_rate=9600;
  7c:	e2 e6       	ldi	r30, 0x62	; 98
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	95 e2       	ldi	r25, 0x25	; 37
  84:	91 83       	std	Z+1, r25	; 0x01
  86:	80 83       	st	Z, r24
	myobj.parity=NONE;
  88:	13 82       	std	Z+3, r1	; 0x03
	myobj.stop_bits=1;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	82 83       	std	Z+2, r24	; 0x02
	Sci_Init(&myobj);
  8e:	cf 01       	movw	r24, r30
  90:	0e 94 74 00 	call	0xe8	; 0xe8 <Sci_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	80 e7       	ldi	r24, 0x70	; 112
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x28>
  a4:	00 00       	nop
	_delay_ms(100);
	Sci_EnableTx(UART0);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 bb 00 	call	0x176	; 0x176 <Sci_EnableTx>
	Sci_EnableRx(UART0);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 be 00 	call	0x17c	; 0x17c <Sci_EnableRx>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x3c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x46>
  c2:	00 00       	nop
	_delay_ms(100);
	Sci_WriteTxData(UART0,'a');
  c4:	61 e6       	ldi	r22, 0x61	; 97
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 b8 00 	call	0x170	; 0x170 <Sci_WriteTxData>
	
    while (1) 
    {
	 Sci_WriteTxData(UART0,'a');	
  cc:	61 e6       	ldi	r22, 0x61	; 97
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 b8 00 	call	0x170	; 0x170 <Sci_WriteTxData>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	80 e7       	ldi	r24, 0x70	; 112
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x68>
  e4:	00 00       	nop
  e6:	f2 cf       	rjmp	.-28     	; 0xcc <main+0x50>

000000e8 <Sci_Init>:

Std_ReturnType Sci_DisableRx(Sci_ChannelType Channel)
{
	UCSRB &=~ (1 << RXEN);
	return 0; // return ok or not ok
}
  e8:	fc 01       	movw	r30, r24
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	59 9a       	sbi	0x0b, 1	; 11
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 bd       	out	0x20, r24	; 32
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	93 81       	ldd	r25, Z+3	; 0x03
  fc:	40 e1       	ldi	r20, 0x10	; 16
  fe:	94 9f       	mul	r25, r20
 100:	90 01       	movw	r18, r0
 102:	11 24       	eor	r1, r1
 104:	28 2b       	or	r18, r24
 106:	20 bd       	out	0x20, r18	; 32
 108:	90 b5       	in	r25, 0x20	; 32
 10a:	82 81       	ldd	r24, Z+2	; 0x02
 10c:	88 0f       	add	r24, r24
 10e:	88 0f       	add	r24, r24
 110:	88 0f       	add	r24, r24
 112:	89 2b       	or	r24, r25
 114:	80 bd       	out	0x20, r24	; 32
 116:	20 81       	ld	r18, Z
 118:	31 81       	ldd	r19, Z+1	; 0x01
 11a:	c9 01       	movw	r24, r18
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	9c 01       	movw	r18, r24
 132:	ad 01       	movw	r20, r26
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	44 1f       	adc	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	60 e4       	ldi	r22, 0x40	; 64
 13e:	72 e4       	ldi	r23, 0x42	; 66
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodsi4>
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	31 09       	sbc	r19, r1
 14c:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
 150:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
 154:	80 b5       	in	r24, 0x20	; 32
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 bd       	out	0x20, r24	; 32
 15a:	80 b5       	in	r24, 0x20	; 32
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 bd       	out	0x20, r24	; 32
 160:	4f 98       	cbi	0x09, 7	; 9
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 166:	89 b9       	out	0x09, r24	; 9
 168:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
 16c:	80 bd       	out	0x20, r24	; 32
 16e:	08 95       	ret

00000170 <Sci_WriteTxData>:
 170:	6c b9       	out	0x0c, r22	; 12
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret

00000176 <Sci_EnableTx>:
 176:	53 9a       	sbi	0x0a, 3	; 10
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret

0000017c <Sci_EnableRx>:

Std_ReturnType Sci_EnableRx(Sci_ChannelType Channel)
{
	UCSRB |= (1 << RXEN);
 17c:	54 9a       	sbi	0x0a, 4	; 10
	return 0; // return ok or not ok
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret

00000182 <__divmodsi4>:
 182:	05 2e       	mov	r0, r21
 184:	97 fb       	bst	r25, 7
 186:	1e f4       	brtc	.+6      	; 0x18e <__divmodsi4+0xc>
 188:	00 94       	com	r0
 18a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__negsi2>
 18e:	57 fd       	sbrc	r21, 7
 190:	07 d0       	rcall	.+14     	; 0x1a0 <__divmodsi4_neg2>
 192:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__udivmodsi4>
 196:	07 fc       	sbrc	r0, 7
 198:	03 d0       	rcall	.+6      	; 0x1a0 <__divmodsi4_neg2>
 19a:	4e f4       	brtc	.+18     	; 0x1ae <__divmodsi4_exit>
 19c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__negsi2>

000001a0 <__divmodsi4_neg2>:
 1a0:	50 95       	com	r21
 1a2:	40 95       	com	r20
 1a4:	30 95       	com	r19
 1a6:	21 95       	neg	r18
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	4f 4f       	sbci	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255

000001ae <__divmodsi4_exit>:
 1ae:	08 95       	ret

000001b0 <__negsi2>:
 1b0:	90 95       	com	r25
 1b2:	80 95       	com	r24
 1b4:	70 95       	com	r23
 1b6:	61 95       	neg	r22
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	8f 4f       	sbci	r24, 0xFF	; 255
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	08 95       	ret

000001c0 <__udivmodsi4>:
 1c0:	a1 e2       	ldi	r26, 0x21	; 33
 1c2:	1a 2e       	mov	r1, r26
 1c4:	aa 1b       	sub	r26, r26
 1c6:	bb 1b       	sub	r27, r27
 1c8:	fd 01       	movw	r30, r26
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <__udivmodsi4_ep>

000001cc <__udivmodsi4_loop>:
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	ee 1f       	adc	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	a2 17       	cp	r26, r18
 1d6:	b3 07       	cpc	r27, r19
 1d8:	e4 07       	cpc	r30, r20
 1da:	f5 07       	cpc	r31, r21
 1dc:	20 f0       	brcs	.+8      	; 0x1e6 <__udivmodsi4_ep>
 1de:	a2 1b       	sub	r26, r18
 1e0:	b3 0b       	sbc	r27, r19
 1e2:	e4 0b       	sbc	r30, r20
 1e4:	f5 0b       	sbc	r31, r21

000001e6 <__udivmodsi4_ep>:
 1e6:	66 1f       	adc	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	88 1f       	adc	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	1a 94       	dec	r1
 1f0:	69 f7       	brne	.-38     	; 0x1cc <__udivmodsi4_loop>
 1f2:	60 95       	com	r22
 1f4:	70 95       	com	r23
 1f6:	80 95       	com	r24
 1f8:	90 95       	com	r25
 1fa:	9b 01       	movw	r18, r22
 1fc:	ac 01       	movw	r20, r24
 1fe:	bd 01       	movw	r22, r26
 200:	cf 01       	movw	r24, r30
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
